name: Release

on: workflow_dispatch

jobs:
  Test:
    name: ${{ matrix.os }} Release Build
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ 'macos-13' ]
    env:
      BUILD_TYPE: Release
      PLUGIN_NAME: Rotor
      BUNDLE_ID: com.bbx-audio.rotor
      VERSION: 1.0.0
      OS_ARCHITECTURE: x86_64
    steps:
      - name: Checkout Repo
        uses: actions/checkout@v4

      - name: Clone JUCE
        uses: actions/checkout@v4
        with:
          repository: juce-framework/JUCE
          ref: 2f980209cc4091a4490bb1bafc5d530f16834e58
          path: ${{ runner.workspace }}/rotor/JUCE

      - name: Import Certificates (MacOS)
        uses: apple-actions/import-codesign-certs@v3
        if: ${{ matrix.os == 'macos-13' }}
        with:
          p12-file-base64: ${{ secrets.DEVELOPER_ID_APP_CERT }}
          p12-password: ${{ secrets.DEVELOPER_ID_APP_PASSWORD }}

      - name: Configure JUCE
        working-directory: ${{ runner.workspace }}/rotor/JUCE
        run: cmake -B bin . -DCMAKE_BUILD_TYPE=${{ env.BUILD_TYPE }} -DCMAKE_OSX_ARCHITECTURES=${{ env.OS_ARCHITECTURE }}

      - name: Build JUCE
        working-directory: ${{ runner.workspace }}/rotor/JUCE
        run: cmake --build bin --config ${{ env.BUILD_TYPE }} --parallel 8

      - name: Precompile Rotor
        working-directory: ${{ runner.workspace }}/rotor
        run: ./scripts/precompile.sh

      - name: Configure Rotor
        working-directory: ${{ runner.workspace }}/rotor
        run: cmake -B bin . -DCMAKE_BUILD_TYPE=${{ env.BUILD_TYPE }} -DCMAKE_OSX_ARCHITECTURES=${{ env.OS_ARCHITECTURE }}

      - name: Build Rotor
        working-directory: ${{ runner.workspace }}/rotor
        run: cmake --build bin --config ${{ env.BUILD_TYPE }} --target ${{ env.PLUGIN_NAME }}_All --parallel 8

      - name: Set Environment Variables
        run: |
          ARTIFACTS_PATH=bin/${{ env.PLUGIN_NAME }}_artefacts/${{ env.BUILD_TYPE }}
          echo "ARTIFACTS_PATH=$ARTIFACTS_PATH" >> $GITHUB_ENV
          echo "VST3_PATH=$ARTIFACTS_PATH/VST3/${{ env.PLUGIN_NAME }}.vst3" >> $GITHUB_ENV
          echo "AU_PATH=$ARTIFACTS_PATH/AU/${{ env.PLUGIN_NAME }}.component" >> $GITHUB_ENV
          echo "ARTIFACT_NAME=${{ env.PLUGIN_NAME }} v${{ env.VERSION }} (${{ runner.os }}-${{ env.OS_ARCHITECTURE }})" >> $GITHUB_ENV

      - name: Pluginval
        run: |
          curl -LO "https://github.com/Tracktion/pluginval/releases/download/v1.0.3/pluginval_macOS.zip"
          7z x pluginval_macOS.zip
          pluginval.app/Contents/MacOS/pluginval --strictness-level 10 --verbose --validate "${{ env.VST3_PATH }}"

      - name: Sign Binaries (MacOS)
        if: ${{ matrix.os == 'macos-13' }}
        run: |
          codesign --force -s "${{ secrets.DEVELOPER_ID_APP }}" -v "${{ env.VST3_PATH }}" --deep --strict --options=runtime --timestamp
          codesign --force -s "${{ secrets.DEVELOPER_ID_APP }}" -v "${{ env.AU_PATH }}" --deep --strict --options=runtime --timestamp

      - name: Download Packages (MacOS)
        if: ${{ matrix.os == 'macos-13' }}
        run: wget http://s.sudre.free.fr/Software/files/Packages.dmg

      - name: Mount Packages (MacOS)
        if: ${{ matrix.os == 'macos-13' }}
        run: hdiutil attach Packages.dmg

      - name: Install Packages (MacOS)
        if: ${{ matrix.os == 'macos-13' }}
        run: sudo installer -pkg /Volumes/Packages\ 1.2.10/Install\ Packages.pkg -target /

      - name: Build Installer (MacOS)
        if: ${{ matrix.os == 'macos-13' }}
        run: packagesbuild packaging/Rotor.pkgproj

      - name: Sign Installer (MacOS)
        if: ${{ matrix.os == 'macos-13' }}
        run: |
          codesign -s "${{ secrets.DEVELOPER_ID_APP }}" --timestamp -i ${{ env.BUNDLE_ID }} --force "packaging/build/${{ env.PLUGIN_NAME }}.pkg"

      - name: Package Installer (MacOS)
        if: ${{ matrix.os == 'macos-13' }}
        run: |
          # Setup tools and directories
          python3 -m pip install setuptools --break-system-packages
          npm install -g appdmg
          mkdir -p packaging/dmg
          mv packaging/build/${{ env.PLUGIN_NAME }}.pkg packaging/dmg
          
          # Create the .dmg
          cd packaging && appdmg dmg.json "${{ env.ARTIFACT_NAME }}.dmg"
          xcrun notarytool submit "${{ env.ARTIFACT_NAME }}.dmg" --apple-id ${{ secrets.APPLE_NOTARIZATION_USERNAME }} --password ${{ secrets.APPLE_NOTARIZATION_PASSWORD }} --team-id ${{ secrets.DEVELOPER_TEAM_ID }} --wait
          xcrun stapler staple "${{ env.ARTIFACT_NAME }}.dmg"

      - name: Upload DMG (MacOS)
        if: ${{ matrix.os == 'macos-13' }}
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.ARTIFACT_NAME }}
          path: packaging/${{ env.ARTIFACT_NAME }}.dmg
